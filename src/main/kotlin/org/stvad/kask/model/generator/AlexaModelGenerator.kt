package org.stvad.kask.model.generator

import arrow.core.Try
import com.squareup.kotlinpoet.FileSpec
import org.stvad.kask.model.IntentDefinition
import kotlin.reflect.KClass

class AlexaModelGenerator(private val intentDefinitions: List<IntentDefinition>,
                          packageName: String,
                          slotOverrideMap: Map<String, KClass<out Any>> = emptyMap(),
                          private val modelSpecBuilder: FileSpec.Builder = FileSpec.builder(packageName, fileName),
                          private val slotVendor: SlotVendor = PoeticSlotVendor(overrideMap = slotOverrideMap)) {
    companion object {
        private const val fileName = "model"
        private const val generatedNotificationComment =
                "This code is generated by the Kask model generation plugin. Any changes made would be overridden during next build."
    }

    fun generate(): FileSpec {
        addImports()
        addIntents()
        return modelSpecBuilder
                .addComment(generatedNotificationComment)
                .build()
    }

    private fun addImports() =
            IntentGenerator.requiredImports.forEach { modelSpecBuilder.addImport(it.first, it.second) }

    private fun addIntents() {
        intentDefinitions.map { Try { IntentGenerator(it, slotVendor).generate() } }.forEach { type ->
            type.fold({ modelSpecBuilder.addComment("Failed to generate an Intent type with the following error: $it\n") },
                    { modelSpecBuilder.addType(it) })
        }

        addGeneratedSlots()
    }

    private fun addGeneratedSlots() =
            slotVendor.generatedSlots.forEach { modelSpecBuilder.addType(it) }
}